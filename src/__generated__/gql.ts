/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }": types.MyMutationUpdatePostToPublishOrPendingDocument,
    " query GetPostSiglePageForTipTabEditor($databaseId: ID!, $asPreview: Boolean = false) {\n        post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n            ...NcmazFcPostFullFields\n        }\n      } ": types.GetPostSiglePageForTipTabEditorDocument,
    "\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n": types.NcgeneralSettingsFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcTagShortFieldsFragment on Tag {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n": types.NcmazFcTagShortFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcTagFullFieldsFragment on Tag {\n    ...NcmazFcTagShortFieldsFragment\n    description\n    count\n  }\n": types.NcmazFcTagFullFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcCategoryFullFieldsFragment on Category {\n    __typename\n    databaseId\n    description\n    name\n    uri\n    count\n    ncTaxonomyMeta {\n      color\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n": types.NcmazFcCategoryFullFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcCategoryCardFieldsNotImage on Category {\n    __typename\n    name\n    uri\n    count\n    databaseId\n    ncTaxonomyMeta {\n      color\n    }\n  }\n": types.NcmazFcCategoryCardFieldsNotImageFragmentDoc,
    "\n  fragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n": types.NcmazFcPostFormatShortFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n    ...NcmazFcPostFormatShortFieldsFragment\n    description\n    count\n  }\n": types.NcmazFcPostFormatFullFieldsFragmentFragmentDoc,
    "\n  fragment NcmazFcPostFullFields on Post {\n    __typename\n    uri\n    modified\n    date\n    commentStatus\n    status\n    commentCount\n    excerpt\n    databaseId\n    title\n    content\n    author {\n      node {\n        description\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    tags(first: 20) {\n      nodes {\n        ...NcmazFcTagShortFieldsFragment\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageHasDetailFields\n      }\n    }\n    postFormats {\n      nodes {\n        id\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFullFields\n    }\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n    }\n  }\n": types.NcmazFcPostFullFieldsFragmentDoc,
    "\n  fragment NcmazFcPostCardFields on Post {\n    ...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n": types.NcmazFcPostCardFieldsFragmentDoc,
    "\n  fragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n": types.NcmazFcPostCardFieldsNotNcmazGalleryImgsFragmentDoc,
    "\n  fragment PostCardFieldsNOTNcmazMEDIA on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n": types.PostCardFieldsNotNcmazMediaFragmentDoc,
    "\n  fragment NcmazFcImageFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n  }\n": types.NcmazFcImageFieldsFragmentDoc,
    "\n  fragment NcmazFcImageHasDetailFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n    caption\n    mediaDetails {\n      height\n      width\n    }\n  }\n": types.NcmazFcImageHasDetailFieldsFragmentDoc,
    "\n  fragment NcmazFcPostMetaFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n  }\n": types.NcmazFcPostMetaFieldsFragmentDoc,
    "\n  fragment NcmazFcPostMetaFullFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n    savedsCount\n    showRightSidebar\n    template\n  }\n": types.NcmazFcPostMetaFullFieldsFragmentDoc,
    "\n  fragment NcmazFcUserShortForPostCardFragment on User {\n    databaseId\n    uri\n    username\n    name\n    ncUserMeta {\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n": types.NcmazFcUserShortForPostCardFragmentFragmentDoc,
    "\n  fragment NcmazFcUserFullFields on User {\n    id\n    databaseId\n    uri\n    username\n    name\n    description\n    ncUserMeta {\n      buymeacoffeUrl\n      color\n      facebookUrl\n      githubUrl\n      instagramUrl\n      linkedinUrl\n      mediumUrl\n      ncBio\n      pinterestUrl\n      twitchUrl\n      twitterUrl\n      vimeoUrl\n      websiteUrl\n      youtubeUrl\n      tiktokUrl\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      backgroundImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n": types.NcmazFcUserFullFieldsFragmentDoc,
    "\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        cssClasses\n        databaseId\n        ncmazfaustMenu {\n          __typename\n          isMegaMenu\n          numberOfMenuColumns\n          posts {\n            nodes {\n              id\n              ... on Post {\n                __typename\n                databaseId\n                title\n                uri\n                modified\n                date\n                excerpt\n                categories {\n                  nodes {\n                    ...NcmazFcCategoryCardFieldsNotImage\n                  }\n                }\n                featuredImage {\n                  node {\n                    ...NcmazFcImageFields\n                  }\n                }\n                postFormats {\n                  nodes {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n      }\n    }\n": types.NcPrimaryMenuFieldsFragmentFragmentDoc,
    "\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n": types.NcFooterMenuFieldsFragmentFragmentDoc,
    "\n  mutation MyMutation(\n    $number: NcmazFcUserReactionPostNumberUpdateEnum = ADD_1\n    $post_id: Int\n    $reaction: NcmazFcUserReactionPostActionEnum = LIKE\n    $user_id: Int\n  ) {\n    ncmazFaustUpdateUserReactionPostCount(\n      input: {\n        number: $number\n        post_id: $post_id\n        reaction: $reaction\n        user_id: $user_id\n      }\n    ) {\n      errors\n      new_count\n      post_id\n      reaction\n      result\n      user_id\n      number\n    }\n  }\n": types.MyMutationDocument,
    "\n  mutation NC_MUTATION_CREATE_POST(\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    createPost(\n      input: {\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n": types.Nc_Mutation_Create_PostDocument,
    "\n  mutation NC_MUTATION_UPDATE_POST(\n    $id: ID!\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    updatePost(\n      input: {\n        id: $id\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n": types.Nc_Mutation_Update_PostDocument,
    " mutation MyMutationAddSubscriber($listId: String = \"\", $user_email: String = \"\", $user_first_name: String = \"\") {\n  ncmazFaustAddSubscriberToMailpoet(\n    input: {user_email: $user_email, listId: $listId, user_first_name: $user_first_name}\n  ) {\n    user_first_name\n    user_email\n    success\n    errors\n  }\n} ": types.MyMutationAddSubscriberDocument,
    "\n  query GetViewerData {\n    viewer {\n      id\n      capabilities\n      url\n      uri\n      username\n      slug\n      name\n      email\n      description\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n          node {\n            ...NcmazFcImageFields\n          }\n        }\n      }\n      roles {\n        edges {\n          node {\n            id\n            name\n            isRestricted\n            displayName\n          }\n        }\n      }\n    }\n  }\n": types.GetViewerDataDocument,
    "\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetPostsByDocument,
    "\n    query QueryGetUserReactionPostsByAuthorAndSearch(\n      $first: Int = 400\n      $author: Int = null\n      $authorName: String = \"\"\n      $search: String = \"\"\n      $after: String = \"\"\n    ) {\n      userReactionPosts(\n        first: $first\n        where: {\n          author: $author\n          authorName: $authorName\n          search: $search\n          orderby: { field: DATE, order: DESC }\n        }\n        after: $after\n      ) {\n        nodes {\n          databaseId\n          title\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  ": types.QueryGetUserReactionPostsByAuthorAndSearchDocument,
    "\n  fragment NcmazFcCommentFullFields on Comment {\n    __typename\n    status\n    parentId\n    parentDatabaseId\n    id\n    date\n    databaseId\n    content\n    author {\n      node {\n        ... on User {\n          id\n          databaseId\n          uri\n          url\n          name\n          ncUserMeta {\n            featuredImage {\n              node {\n                ...NcmazFcImageFields\n              }\n            }\n          }\n        }\n        ... on CommentAuthor {\n          id\n          name\n          databaseId\n          url\n          avatar {\n            url\n            default\n          }\n        }\n      }\n    }\n  }\n": types.NcmazFcCommentFullFieldsFragmentDoc,
    "\n  query QueryGetCommentsByPostId(\n    $after: String\n    $first: Int = 10\n    $order: OrderEnum = ASC\n    $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT\n    $includeUnapproved: [ID]\n    $contentId: ID\n  ) {\n    comments(\n      first: $first\n      after: $after\n      where: {\n        order: $order\n        orderby: $orderby\n        includeUnapproved: $includeUnapproved\n        contentId: $contentId\n      }\n    ) {\n      nodes {\n        ...NcmazFcCommentFullFields\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.QueryGetCommentsByPostIdDocument,
    "\n  mutation MutationCreateComment(\n    $author: String = null\n    $parent: ID = null\n    $status: CommentStatusEnum = APPROVE\n    $content: String = null\n    $commentOn: Int = null\n    $authorEmail: String = null\n    $approved: String = null\n    $authorUrl: String = null\n  ) {\n    createComment(\n      input: {\n        author: $author\n        status: $status\n        parent: $parent\n        content: $content\n        commentOn: $commentOn\n        approved: $approved\n        authorEmail: $authorEmail\n        authorUrl: $authorUrl\n      }\n    ) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n": types.MutationCreateCommentDocument,
    "\n  mutation MutationDeleteCommentById($id: ID = \"\") {\n    deleteComment(input: { id: $id }) {\n      deletedId\n      comment {\n        databaseId\n      }\n    }\n  }\n": types.MutationDeleteCommentByIdDocument,
    "\n  mutation MutationUpdateCommentById($id: ID = \"\", $content: String = \"\") {\n    updateComment(input: { id: $id, content: $content }) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n": types.MutationUpdateCommentByIdDocument,
    "\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n": types.QueryGet10CategoriesDocument,
    "\n  query QueryGetCategories($after: String, $first: Int = 20) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetCategoriesDocument,
    "\n  query QueryGetTags($after: String = \"\", $first: Int = 20) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetTagsDocument,
    "\n  query QueryGetPostsByUserReact(\n    $after: String\n    $first: Int = 20\n    $inUserAndReaction: String\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: { inUserAndReaction: $inUserAndReaction }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetPostsByUserReactDocument,
    "\n      query QueryGetPostsNcmazMetadataByIds(\n        $in: [ID] = null\n        $first: Int = 100\n        $after: String = null\n      ) {\n        posts(first: $first, after: $after, where: { in: $in }) {\n          nodes {\n            databaseId\n            commentCount\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n          }\n        }\n      }\n    ": types.QueryGetPostsNcmazMetadataByIdsDocument,
    "\n  query QueryGetAllReactionPostsByUserAndReaction(\n    $search: String = \"\"\n    $first: Int = 400\n  ) {\n    viewer {\n      userReactionPosts(where: { search: $search }, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }\n": types.QueryGetAllReactionPostsByUserAndReactionDocument,
    "\n  query PageAuthorBookmarksGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n": types.PageAuthorBookmarksGetDataDocument,
    "\n  query PageAuthorFavoritesGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n": types.PageAuthorFavoritesGetDataDocument,
    "\n  query GetAuthorWithPosts($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n": types.GetAuthorWithPostsDocument,
    " query ProfilePageGetAuthorProfile {\n      viewer {\n        email\n        firstName\n      lastName\n      locale\n      nicename\n      nickname\n        ...NcmazFcUserFullFields\n      }\n  }   \n": types.ProfilePageGetAuthorProfileDocument,
    "\n    mutation ProfilePageMutationUpdateViewer($id: ID!, $lastName: String, $firstName: String, $email: String, $displayName: String, $description: String, $ncmazBackgroundImgAlt: String, $ncmazBackgroundImgUrl: String, $ncmazBio: String, $ncmazBuymeacoffeUrl: String, $ncmazFacebookUrl: String, $ncmazFeaturedImgAlt: String, $ncmazFeaturedImgUrl: String, $ncmazGithubUrl: String, $ncmazInstagramUrl: String, $ncmazLinkedinUrl: String, $ncmazMediumUrl: String, $ncmazPinterestUrl: String, $ncmazTwitchUrl: String, $ncmazTwitterUrl: String, $ncmazVimeoUrl: String, $ncmazWebsiteUrl: String, $ncmazYoutubeUrl: String, $nicename: String, $nickname: String, $password: String, $websiteUrl: String, $ncmazTiktokUrl: String) {\n  updateUser(\n    input: {id: $id, email: $email, displayName: $displayName, description: $description, lastName: $lastName, ncmazBackgroundImgAlt: $ncmazBackgroundImgAlt, ncmazBackgroundImgUrl: $ncmazBackgroundImgUrl, ncmazBio: $ncmazBio, ncmazBuymeacoffeUrl: $ncmazBuymeacoffeUrl, ncmazFacebookUrl: $ncmazFacebookUrl, ncmazFeaturedImgAlt: $ncmazFeaturedImgAlt, ncmazFeaturedImgUrl: $ncmazFeaturedImgUrl, ncmazGithubUrl: $ncmazGithubUrl, ncmazInstagramUrl: $ncmazInstagramUrl, ncmazLinkedinUrl: $ncmazLinkedinUrl, ncmazMediumUrl: $ncmazMediumUrl, ncmazPinterestUrl: $ncmazPinterestUrl, ncmazTwitchUrl: $ncmazTwitchUrl, ncmazTwitterUrl: $ncmazTwitterUrl, ncmazVimeoUrl: $ncmazVimeoUrl, ncmazWebsiteUrl: $ncmazWebsiteUrl, ncmazYoutubeUrl: $ncmazYoutubeUrl, websiteUrl: $websiteUrl, ncmazTiktokUrl: $ncmazTiktokUrl, password: $password, nicename: $nicename, nickname: $nickname, firstName: $firstName}\n  ){\n    user {\n      id\n    }\n  }\n}\n  ": types.ProfilePageMutationUpdateViewerDocument,
    " query ProfilePageGetViewerPostsByStatus($first: Int, $status: PostStatusEnum, $after: String) {\n      viewer {\n        posts(first:  $first, after:$after, where: {status: $status,orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n            commentCount\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n  }   \n": types.ProfilePageGetViewerPostsByStatusDocument,
    "\n        query GetPostForEditPostPage($databaseId: ID!) {\n          post(id: $databaseId, idType: DATABASE_ID) {\n            ...NcmazFcPostFullFields\n          }\n        }\n      ": types.GetPostForEditPostPageDocument,
    "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetReadingListPageDocument,
    " \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    ": types.QueryGetUsersBySearchOnSearchPageDocument,
    "\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetUsersBySearchDocument,
    " \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    ": types.QueryGetCategoriesBySearchOnSearchPageDocument,
    "\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetCategoriesBySearchDocument,
    "\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetPostsBySearchDocument,
    "\n      mutation SignUpPageMutationRegisterUser(\n        $username: String! = \"\"\n        $email: String\n        $password: String\n      ) {\n        registerUser(\n          input: { username: $username, email: $email, password: $password }\n        ) {\n          clientMutationId\n        }\n      }\n    ": types.SignUpPageMutationRegisterUserDocument,
    "\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  ": types.CoreColumnFragmentFragmentDoc,
    "\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  ": types.CoreColumnsFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n      renderedHtml\n    }\n  ": types.NcmazFaustBlockCtaFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  ": types.NcmazFaustBlockGroupFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  ": types.NcmazFaustBlockMagazineFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  ": types.NcmazFaustBlockTermsFragmentFragmentDoc,
    "\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n        posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }": types.PageArchiveGetArchiveDocument,
    "\nquery PageCategoryGetCategory($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }": types.PageCategoryGetCategoryDocument,
    "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      ncPageMeta {\n        isFullWithPage\n      }\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: true) {\n        __typename\n        renderedHtml\n        clientId\n        parentClientId\n        ...NcmazFaustBlockMagazineFragment\n        ...NcmazFaustBlockTermsFragment\n        ...NcmazFaustBlockCtaFragment\n        ...NcmazFaustBlockGroupFragment\n        ...CoreColumnsFragment\n        ...CoreColumnFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPostSiglePage($databaseId: ID!, $post_databaseId: Int,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    posts(where: {isRelatedOfPostId:$post_databaseId}) {\n      nodes {\n      ...PostCardFieldsNOTNcmazMEDIA\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetPostSiglePageDocument,
    "\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }": types.PageTagGetTagDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }"): (typeof documents)["mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " query GetPostSiglePageForTipTabEditor($databaseId: ID!, $asPreview: Boolean = false) {\n        post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n            ...NcmazFcPostFullFields\n        }\n      } "): (typeof documents)[" query GetPostSiglePageForTipTabEditor($databaseId: ID!, $asPreview: Boolean = false) {\n        post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n            ...NcmazFcPostFullFields\n        }\n      } "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n"): (typeof documents)["\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcTagShortFieldsFragment on Tag {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n"): (typeof documents)["\n  fragment NcmazFcTagShortFieldsFragment on Tag {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcTagFullFieldsFragment on Tag {\n    ...NcmazFcTagShortFieldsFragment\n    description\n    count\n  }\n"): (typeof documents)["\n  fragment NcmazFcTagFullFieldsFragment on Tag {\n    ...NcmazFcTagShortFieldsFragment\n    description\n    count\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcCategoryFullFieldsFragment on Category {\n    __typename\n    databaseId\n    description\n    name\n    uri\n    count\n    ncTaxonomyMeta {\n      color\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcCategoryFullFieldsFragment on Category {\n    __typename\n    databaseId\n    description\n    name\n    uri\n    count\n    ncTaxonomyMeta {\n      color\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcCategoryCardFieldsNotImage on Category {\n    __typename\n    name\n    uri\n    count\n    databaseId\n    ncTaxonomyMeta {\n      color\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcCategoryCardFieldsNotImage on Category {\n    __typename\n    name\n    uri\n    count\n    databaseId\n    ncTaxonomyMeta {\n      color\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n    __typename\n    name\n    uri\n    databaseId\n    count\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n    ...NcmazFcPostFormatShortFieldsFragment\n    description\n    count\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n    ...NcmazFcPostFormatShortFieldsFragment\n    description\n    count\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostFullFields on Post {\n    __typename\n    uri\n    modified\n    date\n    commentStatus\n    status\n    commentCount\n    excerpt\n    databaseId\n    title\n    content\n    author {\n      node {\n        description\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    tags(first: 20) {\n      nodes {\n        ...NcmazFcTagShortFieldsFragment\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageHasDetailFields\n      }\n    }\n    postFormats {\n      nodes {\n        id\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFullFields\n    }\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostFullFields on Post {\n    __typename\n    uri\n    modified\n    date\n    commentStatus\n    status\n    commentCount\n    excerpt\n    databaseId\n    title\n    content\n    author {\n      node {\n        description\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    tags(first: 20) {\n      nodes {\n        ...NcmazFcTagShortFieldsFragment\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageHasDetailFields\n      }\n    }\n    postFormats {\n      nodes {\n        id\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFullFields\n    }\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageHasDetailFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostCardFields on Post {\n    ...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostCardFields on Post {\n    ...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n    ncmazGalleryImgs {\n      image1 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image2 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image3 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image4 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image5 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image6 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image7 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      image8 {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncmazVideoUrl {\n      videoUrl\n    }\n    ncmazAudioUrl {\n      audioUrl\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostCardFieldsNOTNcmazMEDIA on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n"): (typeof documents)["\n  fragment PostCardFieldsNOTNcmazMEDIA on Post {\n    __typename\n    databaseId\n    title\n    uri\n    status\n    modified\n    date\n    commentStatus\n    commentCount\n    excerpt\n    author {\n      node {\n        ...NcmazFcUserShortForPostCardFragment\n      }\n    }\n    categories {\n      nodes {\n        ...NcmazFcCategoryCardFieldsNotImage\n      }\n    }\n    featuredImage {\n      node {\n        ...NcmazFcImageFields\n      }\n    }\n    postFormats {\n      nodes {\n        name\n        slug\n      }\n    }\n    ncPostMetaData {\n      ...NcmazFcPostMetaFields\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcImageFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n  }\n"): (typeof documents)["\n  fragment NcmazFcImageFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcImageHasDetailFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n    caption\n    mediaDetails {\n      height\n      width\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcImageHasDetailFields on MediaItem {\n    __typename\n    altText\n    databaseId\n    sourceUrl\n    caption\n    mediaDetails {\n      height\n      width\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostMetaFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostMetaFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcPostMetaFullFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n    savedsCount\n    showRightSidebar\n    template\n  }\n"): (typeof documents)["\n  fragment NcmazFcPostMetaFullFields on NcPostMetaData {\n    __typename\n    viewsCount\n    readingTime\n    likesCount\n    savedsCount\n    showRightSidebar\n    template\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcUserShortForPostCardFragment on User {\n    databaseId\n    uri\n    username\n    name\n    ncUserMeta {\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcUserShortForPostCardFragment on User {\n    databaseId\n    uri\n    username\n    name\n    ncUserMeta {\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcUserFullFields on User {\n    id\n    databaseId\n    uri\n    username\n    name\n    description\n    ncUserMeta {\n      buymeacoffeUrl\n      color\n      facebookUrl\n      githubUrl\n      instagramUrl\n      linkedinUrl\n      mediumUrl\n      ncBio\n      pinterestUrl\n      twitchUrl\n      twitterUrl\n      vimeoUrl\n      websiteUrl\n      youtubeUrl\n      tiktokUrl\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      backgroundImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcUserFullFields on User {\n    id\n    databaseId\n    uri\n    username\n    name\n    description\n    ncUserMeta {\n      buymeacoffeUrl\n      color\n      facebookUrl\n      githubUrl\n      instagramUrl\n      linkedinUrl\n      mediumUrl\n      ncBio\n      pinterestUrl\n      twitchUrl\n      twitterUrl\n      vimeoUrl\n      websiteUrl\n      youtubeUrl\n      tiktokUrl\n      featuredImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n      backgroundImage {\n        node {\n          ...NcmazFcImageFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        cssClasses\n        databaseId\n        ncmazfaustMenu {\n          __typename\n          isMegaMenu\n          numberOfMenuColumns\n          posts {\n            nodes {\n              id\n              ... on Post {\n                __typename\n                databaseId\n                title\n                uri\n                modified\n                date\n                excerpt\n                categories {\n                  nodes {\n                    ...NcmazFcCategoryCardFieldsNotImage\n                  }\n                }\n                featuredImage {\n                  node {\n                    ...NcmazFcImageFields\n                  }\n                }\n                postFormats {\n                  nodes {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n      }\n    }\n"): (typeof documents)["\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        cssClasses\n        databaseId\n        ncmazfaustMenu {\n          __typename\n          isMegaMenu\n          numberOfMenuColumns\n          posts {\n            nodes {\n              id\n              ... on Post {\n                __typename\n                databaseId\n                title\n                uri\n                modified\n                date\n                excerpt\n                categories {\n                  nodes {\n                    ...NcmazFcCategoryCardFieldsNotImage\n                  }\n                }\n                featuredImage {\n                  node {\n                    ...NcmazFcImageFields\n                  }\n                }\n                postFormats {\n                  nodes {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n      }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n"): (typeof documents)["\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MyMutation(\n    $number: NcmazFcUserReactionPostNumberUpdateEnum = ADD_1\n    $post_id: Int\n    $reaction: NcmazFcUserReactionPostActionEnum = LIKE\n    $user_id: Int\n  ) {\n    ncmazFaustUpdateUserReactionPostCount(\n      input: {\n        number: $number\n        post_id: $post_id\n        reaction: $reaction\n        user_id: $user_id\n      }\n    ) {\n      errors\n      new_count\n      post_id\n      reaction\n      result\n      user_id\n      number\n    }\n  }\n"): (typeof documents)["\n  mutation MyMutation(\n    $number: NcmazFcUserReactionPostNumberUpdateEnum = ADD_1\n    $post_id: Int\n    $reaction: NcmazFcUserReactionPostActionEnum = LIKE\n    $user_id: Int\n  ) {\n    ncmazFaustUpdateUserReactionPostCount(\n      input: {\n        number: $number\n        post_id: $post_id\n        reaction: $reaction\n        user_id: $user_id\n      }\n    ) {\n      errors\n      new_count\n      post_id\n      reaction\n      result\n      user_id\n      number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation NC_MUTATION_CREATE_POST(\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    createPost(\n      input: {\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NC_MUTATION_CREATE_POST(\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    createPost(\n      input: {\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation NC_MUTATION_UPDATE_POST(\n    $id: ID!\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    updatePost(\n      input: {\n        id: $id\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NC_MUTATION_UPDATE_POST(\n    $id: ID!\n    $commentStatus: String = \"open\"\n    $status: PostStatusEnum = null\n    $title: String = \"\"\n    $excerpt: String = \"\"\n    $ncmazAudioUrl: String = null\n    $content: String = \"\"\n    $ncmazVideoUrl: String = null\n    $postFormatName: String = null\n    $categoryNodes: [PostCategoriesNodeInput] = {}\n    $ncTags: String = null\n    $date: String = null\n    #\n    $img_1_url: String = null\n    $img_2_url: String = null\n    $img_3_url: String = null\n    $img_4_url: String = null\n    $img_5_url: String = null\n    $img_6_url: String = null\n    $img_7_url: String = null\n    $img_8_url: String = null\n    $featuredImg_url: String = null\n    #\n    $img_1_alt: String = null\n    $img_2_alt: String = null\n    $img_3_alt: String = null\n    $img_4_alt: String = null\n    $img_5_alt: String = null\n    $img_6_alt: String = null\n    $img_7_alt: String = null\n    $img_8_alt: String = null\n    $featuredImg_alt: String = null\n  ) {\n    updatePost(\n      input: {\n        id: $id\n        status: $status\n        date: $date\n        commentStatus: $commentStatus\n        title: $title\n        excerpt: $excerpt\n        ncmazAudioUrl: $ncmazAudioUrl\n        content: $content\n        categories: { append: false, nodes: $categoryNodes }\n        ncTags: $ncTags\n        ncmazVideoUrl: $ncmazVideoUrl\n        postFormats: { nodes: { name: $postFormatName }, append: false }\n        #\n        ncmazGalleryImg1Url: $img_1_url\n        ncmazGalleryImg2Url: $img_2_url\n        ncmazGalleryImg3Url: $img_3_url\n        ncmazGalleryImg4Url: $img_4_url\n        ncmazGalleryImg5Url: $img_5_url\n        ncmazGalleryImg6Url: $img_6_url\n        ncmazGalleryImg7Url: $img_7_url\n        ncmazGalleryImg8Url: $img_8_url\n        ncmazFeaturedImgUrl: $featuredImg_url\n        #\n        ncmazGalleryImg1Alt: $img_1_alt\n        ncmazGalleryImg2Alt: $img_2_alt\n        ncmazGalleryImg3Alt: $img_3_alt\n        ncmazGalleryImg4Alt: $img_4_alt\n        ncmazGalleryImg5Alt: $img_5_alt\n        ncmazGalleryImg6Alt: $img_6_alt\n        ncmazGalleryImg7Alt: $img_7_alt\n        ncmazGalleryImg8Alt: $img_8_alt\n        ncmazFeaturedImgAlt: $featuredImg_alt\n      }\n    ) {\n      post {\n        title\n        id\n        databaseId\n        status\n        uri\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " mutation MyMutationAddSubscriber($listId: String = \"\", $user_email: String = \"\", $user_first_name: String = \"\") {\n  ncmazFaustAddSubscriberToMailpoet(\n    input: {user_email: $user_email, listId: $listId, user_first_name: $user_first_name}\n  ) {\n    user_first_name\n    user_email\n    success\n    errors\n  }\n} "): (typeof documents)[" mutation MyMutationAddSubscriber($listId: String = \"\", $user_email: String = \"\", $user_first_name: String = \"\") {\n  ncmazFaustAddSubscriberToMailpoet(\n    input: {user_email: $user_email, listId: $listId, user_first_name: $user_first_name}\n  ) {\n    user_first_name\n    user_email\n    success\n    errors\n  }\n} "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetViewerData {\n    viewer {\n      id\n      capabilities\n      url\n      uri\n      username\n      slug\n      name\n      email\n      description\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n          node {\n            ...NcmazFcImageFields\n          }\n        }\n      }\n      roles {\n        edges {\n          node {\n            id\n            name\n            isRestricted\n            displayName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetViewerData {\n    viewer {\n      id\n      capabilities\n      url\n      uri\n      username\n      slug\n      name\n      email\n      description\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n          node {\n            ...NcmazFcImageFields\n          }\n        }\n      }\n      roles {\n        edges {\n          node {\n            id\n            name\n            isRestricted\n            displayName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query QueryGetUserReactionPostsByAuthorAndSearch(\n      $first: Int = 400\n      $author: Int = null\n      $authorName: String = \"\"\n      $search: String = \"\"\n      $after: String = \"\"\n    ) {\n      userReactionPosts(\n        first: $first\n        where: {\n          author: $author\n          authorName: $authorName\n          search: $search\n          orderby: { field: DATE, order: DESC }\n        }\n        after: $after\n      ) {\n        nodes {\n          databaseId\n          title\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "): (typeof documents)["\n    query QueryGetUserReactionPostsByAuthorAndSearch(\n      $first: Int = 400\n      $author: Int = null\n      $authorName: String = \"\"\n      $search: String = \"\"\n      $after: String = \"\"\n    ) {\n      userReactionPosts(\n        first: $first\n        where: {\n          author: $author\n          authorName: $authorName\n          search: $search\n          orderby: { field: DATE, order: DESC }\n        }\n        after: $after\n      ) {\n        nodes {\n          databaseId\n          title\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NcmazFcCommentFullFields on Comment {\n    __typename\n    status\n    parentId\n    parentDatabaseId\n    id\n    date\n    databaseId\n    content\n    author {\n      node {\n        ... on User {\n          id\n          databaseId\n          uri\n          url\n          name\n          ncUserMeta {\n            featuredImage {\n              node {\n                ...NcmazFcImageFields\n              }\n            }\n          }\n        }\n        ... on CommentAuthor {\n          id\n          name\n          databaseId\n          url\n          avatar {\n            url\n            default\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NcmazFcCommentFullFields on Comment {\n    __typename\n    status\n    parentId\n    parentDatabaseId\n    id\n    date\n    databaseId\n    content\n    author {\n      node {\n        ... on User {\n          id\n          databaseId\n          uri\n          url\n          name\n          ncUserMeta {\n            featuredImage {\n              node {\n                ...NcmazFcImageFields\n              }\n            }\n          }\n        }\n        ... on CommentAuthor {\n          id\n          name\n          databaseId\n          url\n          avatar {\n            url\n            default\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetCommentsByPostId(\n    $after: String\n    $first: Int = 10\n    $order: OrderEnum = ASC\n    $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT\n    $includeUnapproved: [ID]\n    $contentId: ID\n  ) {\n    comments(\n      first: $first\n      after: $after\n      where: {\n        order: $order\n        orderby: $orderby\n        includeUnapproved: $includeUnapproved\n        contentId: $contentId\n      }\n    ) {\n      nodes {\n        ...NcmazFcCommentFullFields\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetCommentsByPostId(\n    $after: String\n    $first: Int = 10\n    $order: OrderEnum = ASC\n    $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT\n    $includeUnapproved: [ID]\n    $contentId: ID\n  ) {\n    comments(\n      first: $first\n      after: $after\n      where: {\n        order: $order\n        orderby: $orderby\n        includeUnapproved: $includeUnapproved\n        contentId: $contentId\n      }\n    ) {\n      nodes {\n        ...NcmazFcCommentFullFields\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MutationCreateComment(\n    $author: String = null\n    $parent: ID = null\n    $status: CommentStatusEnum = APPROVE\n    $content: String = null\n    $commentOn: Int = null\n    $authorEmail: String = null\n    $approved: String = null\n    $authorUrl: String = null\n  ) {\n    createComment(\n      input: {\n        author: $author\n        status: $status\n        parent: $parent\n        content: $content\n        commentOn: $commentOn\n        approved: $approved\n        authorEmail: $authorEmail\n        authorUrl: $authorUrl\n      }\n    ) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MutationCreateComment(\n    $author: String = null\n    $parent: ID = null\n    $status: CommentStatusEnum = APPROVE\n    $content: String = null\n    $commentOn: Int = null\n    $authorEmail: String = null\n    $approved: String = null\n    $authorUrl: String = null\n  ) {\n    createComment(\n      input: {\n        author: $author\n        status: $status\n        parent: $parent\n        content: $content\n        commentOn: $commentOn\n        approved: $approved\n        authorEmail: $authorEmail\n        authorUrl: $authorUrl\n      }\n    ) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MutationDeleteCommentById($id: ID = \"\") {\n    deleteComment(input: { id: $id }) {\n      deletedId\n      comment {\n        databaseId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MutationDeleteCommentById($id: ID = \"\") {\n    deleteComment(input: { id: $id }) {\n      deletedId\n      comment {\n        databaseId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MutationUpdateCommentById($id: ID = \"\", $content: String = \"\") {\n    updateComment(input: { id: $id, content: $content }) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MutationUpdateCommentById($id: ID = \"\", $content: String = \"\") {\n    updateComment(input: { id: $id, content: $content }) {\n      clientMutationId\n      success\n      comment {\n        ...NcmazFcCommentFullFields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetCategories($after: String, $first: Int = 20) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetCategories($after: String, $first: Int = 20) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetTags($after: String = \"\", $first: Int = 20) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetTags($after: String = \"\", $first: Int = 20) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetPostsByUserReact(\n    $after: String\n    $first: Int = 20\n    $inUserAndReaction: String\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: { inUserAndReaction: $inUserAndReaction }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetPostsByUserReact(\n    $after: String\n    $first: Int = 20\n    $inUserAndReaction: String\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: { inUserAndReaction: $inUserAndReaction }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query QueryGetPostsNcmazMetadataByIds(\n        $in: [ID] = null\n        $first: Int = 100\n        $after: String = null\n      ) {\n        posts(first: $first, after: $after, where: { in: $in }) {\n          nodes {\n            databaseId\n            commentCount\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query QueryGetPostsNcmazMetadataByIds(\n        $in: [ID] = null\n        $first: Int = 100\n        $after: String = null\n      ) {\n        posts(first: $first, after: $after, where: { in: $in }) {\n          nodes {\n            databaseId\n            commentCount\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetAllReactionPostsByUserAndReaction(\n    $search: String = \"\"\n    $first: Int = 400\n  ) {\n    viewer {\n      userReactionPosts(where: { search: $search }, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetAllReactionPostsByUserAndReaction(\n    $search: String = \"\"\n    $first: Int = 400\n  ) {\n    viewer {\n      userReactionPosts(where: { search: $search }, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PageAuthorBookmarksGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"): (typeof documents)["\n  query PageAuthorBookmarksGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PageAuthorFavoritesGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"): (typeof documents)["\n  query PageAuthorFavoritesGetData($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAuthorWithPosts($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"): (typeof documents)["\n  query GetAuthorWithPosts($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " query ProfilePageGetAuthorProfile {\n      viewer {\n        email\n        firstName\n      lastName\n      locale\n      nicename\n      nickname\n        ...NcmazFcUserFullFields\n      }\n  }   \n"): (typeof documents)[" query ProfilePageGetAuthorProfile {\n      viewer {\n        email\n        firstName\n      lastName\n      locale\n      nicename\n      nickname\n        ...NcmazFcUserFullFields\n      }\n  }   \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ProfilePageMutationUpdateViewer($id: ID!, $lastName: String, $firstName: String, $email: String, $displayName: String, $description: String, $ncmazBackgroundImgAlt: String, $ncmazBackgroundImgUrl: String, $ncmazBio: String, $ncmazBuymeacoffeUrl: String, $ncmazFacebookUrl: String, $ncmazFeaturedImgAlt: String, $ncmazFeaturedImgUrl: String, $ncmazGithubUrl: String, $ncmazInstagramUrl: String, $ncmazLinkedinUrl: String, $ncmazMediumUrl: String, $ncmazPinterestUrl: String, $ncmazTwitchUrl: String, $ncmazTwitterUrl: String, $ncmazVimeoUrl: String, $ncmazWebsiteUrl: String, $ncmazYoutubeUrl: String, $nicename: String, $nickname: String, $password: String, $websiteUrl: String, $ncmazTiktokUrl: String) {\n  updateUser(\n    input: {id: $id, email: $email, displayName: $displayName, description: $description, lastName: $lastName, ncmazBackgroundImgAlt: $ncmazBackgroundImgAlt, ncmazBackgroundImgUrl: $ncmazBackgroundImgUrl, ncmazBio: $ncmazBio, ncmazBuymeacoffeUrl: $ncmazBuymeacoffeUrl, ncmazFacebookUrl: $ncmazFacebookUrl, ncmazFeaturedImgAlt: $ncmazFeaturedImgAlt, ncmazFeaturedImgUrl: $ncmazFeaturedImgUrl, ncmazGithubUrl: $ncmazGithubUrl, ncmazInstagramUrl: $ncmazInstagramUrl, ncmazLinkedinUrl: $ncmazLinkedinUrl, ncmazMediumUrl: $ncmazMediumUrl, ncmazPinterestUrl: $ncmazPinterestUrl, ncmazTwitchUrl: $ncmazTwitchUrl, ncmazTwitterUrl: $ncmazTwitterUrl, ncmazVimeoUrl: $ncmazVimeoUrl, ncmazWebsiteUrl: $ncmazWebsiteUrl, ncmazYoutubeUrl: $ncmazYoutubeUrl, websiteUrl: $websiteUrl, ncmazTiktokUrl: $ncmazTiktokUrl, password: $password, nicename: $nicename, nickname: $nickname, firstName: $firstName}\n  ){\n    user {\n      id\n    }\n  }\n}\n  "): (typeof documents)["\n    mutation ProfilePageMutationUpdateViewer($id: ID!, $lastName: String, $firstName: String, $email: String, $displayName: String, $description: String, $ncmazBackgroundImgAlt: String, $ncmazBackgroundImgUrl: String, $ncmazBio: String, $ncmazBuymeacoffeUrl: String, $ncmazFacebookUrl: String, $ncmazFeaturedImgAlt: String, $ncmazFeaturedImgUrl: String, $ncmazGithubUrl: String, $ncmazInstagramUrl: String, $ncmazLinkedinUrl: String, $ncmazMediumUrl: String, $ncmazPinterestUrl: String, $ncmazTwitchUrl: String, $ncmazTwitterUrl: String, $ncmazVimeoUrl: String, $ncmazWebsiteUrl: String, $ncmazYoutubeUrl: String, $nicename: String, $nickname: String, $password: String, $websiteUrl: String, $ncmazTiktokUrl: String) {\n  updateUser(\n    input: {id: $id, email: $email, displayName: $displayName, description: $description, lastName: $lastName, ncmazBackgroundImgAlt: $ncmazBackgroundImgAlt, ncmazBackgroundImgUrl: $ncmazBackgroundImgUrl, ncmazBio: $ncmazBio, ncmazBuymeacoffeUrl: $ncmazBuymeacoffeUrl, ncmazFacebookUrl: $ncmazFacebookUrl, ncmazFeaturedImgAlt: $ncmazFeaturedImgAlt, ncmazFeaturedImgUrl: $ncmazFeaturedImgUrl, ncmazGithubUrl: $ncmazGithubUrl, ncmazInstagramUrl: $ncmazInstagramUrl, ncmazLinkedinUrl: $ncmazLinkedinUrl, ncmazMediumUrl: $ncmazMediumUrl, ncmazPinterestUrl: $ncmazPinterestUrl, ncmazTwitchUrl: $ncmazTwitchUrl, ncmazTwitterUrl: $ncmazTwitterUrl, ncmazVimeoUrl: $ncmazVimeoUrl, ncmazWebsiteUrl: $ncmazWebsiteUrl, ncmazYoutubeUrl: $ncmazYoutubeUrl, websiteUrl: $websiteUrl, ncmazTiktokUrl: $ncmazTiktokUrl, password: $password, nicename: $nicename, nickname: $nickname, firstName: $firstName}\n  ){\n    user {\n      id\n    }\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " query ProfilePageGetViewerPostsByStatus($first: Int, $status: PostStatusEnum, $after: String) {\n      viewer {\n        posts(first:  $first, after:$after, where: {status: $status,orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n            commentCount\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n  }   \n"): (typeof documents)[" query ProfilePageGetViewerPostsByStatus($first: Int, $status: PostStatusEnum, $after: String) {\n      viewer {\n        posts(first:  $first, after:$after, where: {status: $status,orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n            ncPostMetaData {\n              ...NcmazFcPostMetaFullFields\n            }\n            commentCount\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n  }   \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query GetPostForEditPostPage($databaseId: ID!) {\n          post(id: $databaseId, idType: DATABASE_ID) {\n            ...NcmazFcPostFullFields\n          }\n        }\n      "): (typeof documents)["\n        query GetPostForEditPostPage($databaseId: ID!) {\n          post(id: $databaseId, idType: DATABASE_ID) {\n            ...NcmazFcPostFullFields\n          }\n        }\n      "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "): (typeof documents)[" \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "): (typeof documents)[" \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation SignUpPageMutationRegisterUser(\n        $username: String! = \"\"\n        $email: String\n        $password: String\n      ) {\n        registerUser(\n          input: { username: $username, email: $email, password: $password }\n        ) {\n          clientMutationId\n        }\n      }\n    "): (typeof documents)["\n      mutation SignUpPageMutationRegisterUser(\n        $username: String! = \"\"\n        $email: String\n        $password: String\n      ) {\n        registerUser(\n          input: { username: $username, email: $email, password: $password }\n        ) {\n          clientMutationId\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "): (typeof documents)["\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "): (typeof documents)["\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n      renderedHtml\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n      renderedHtml\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n        posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"): (typeof documents)["\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n        posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n          nodes {\n            ...NcmazFcPostCardFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery PageCategoryGetCategory($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }"): (typeof documents)["\nquery PageCategoryGetCategory($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      ncPageMeta {\n        isFullWithPage\n      }\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: true) {\n        __typename\n        renderedHtml\n        clientId\n        parentClientId\n        ...NcmazFaustBlockMagazineFragment\n        ...NcmazFaustBlockTermsFragment\n        ...NcmazFaustBlockCtaFragment\n        ...NcmazFaustBlockGroupFragment\n        ...CoreColumnsFragment\n        ...CoreColumnFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      ncPageMeta {\n        isFullWithPage\n      }\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: true) {\n        __typename\n        renderedHtml\n        clientId\n        parentClientId\n        ...NcmazFaustBlockMagazineFragment\n        ...NcmazFaustBlockTermsFragment\n        ...NcmazFaustBlockCtaFragment\n        ...NcmazFaustBlockGroupFragment\n        ...CoreColumnsFragment\n        ...CoreColumnFragment\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPostSiglePage($databaseId: ID!, $post_databaseId: Int,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    posts(where: {isRelatedOfPostId:$post_databaseId}) {\n      nodes {\n      ...PostCardFieldsNOTNcmazMEDIA\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPostSiglePage($databaseId: ID!, $post_databaseId: Int,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    posts(where: {isRelatedOfPostId:$post_databaseId}) {\n      nodes {\n      ...PostCardFieldsNOTNcmazMEDIA\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"): (typeof documents)["\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;